#!/bin/bash

# üîí Script de Verificaci√≥n de Archivos de Entorno - MB45 Furniture
# Este script verifica que los archivos de entorno est√©n protegidos y existan

echo "üîí Verificando archivos de entorno..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para verificar archivo
check_env_file() {
    local file_path=$1
    local description=$2
    
    if [ -f "$file_path" ]; then
        echo -e "${GREEN}‚úÖ $description existe: $file_path${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $description NO existe: $file_path${NC}"
        return 1
    fi
}

# Funci√≥n para verificar que archivo est√© en .gitignore
check_gitignore() {
    local file_pattern=$1
    local description=$2
    
    if grep -q "$file_pattern" .gitignore; then
        echo -e "${GREEN}‚úÖ $description est√° protegido en .gitignore${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $description NO est√° protegido en .gitignore${NC}"
        return 1
    fi
}

echo ""
echo "üìÅ Verificando existencia de archivos de entorno..."

# Verificar archivos de entorno
check_env_file "./server/.env" "Archivo de entorno del backend"
check_env_file "./clientnpm/.env" "Archivo de entorno del frontend (desarrollo)"
check_env_file "./clientnpm/.env.production" "Archivo de entorno del frontend (producci√≥n)"

echo ""
echo "üõ°Ô∏è Verificando protecci√≥n en .gitignore..."

# Verificar protecci√≥n en .gitignore
check_gitignore "**/.env" "Archivos .env"
check_gitignore "**/.env.*" "Archivos .env.*"

echo ""
echo "üìã Verificando contenido de archivos..."

# Verificar que los archivos tengan contenido
if [ -f "./server/.env" ]; then
    echo -e "${GREEN}‚úÖ Backend .env tiene contenido:${NC}"
    echo "   - MONGO_URI: $(grep -q "MONGO_URI" ./server/.env && echo "‚úÖ Configurado" || echo "‚ùå No encontrado")"
    echo "   - JWT_SECRET: $(grep -q "JWT_SECRET" ./server/.env && echo "‚úÖ Configurado" || echo "‚ùå No encontrado")"
    echo "   - CLOUDINARY: $(grep -q "CLOUDINARY" ./server/.env && echo "‚úÖ Configurado" || echo "‚ùå No encontrado")"
fi

if [ -f "./clientnpm/.env" ]; then
    echo -e "${GREEN}‚úÖ Frontend .env tiene contenido:${NC}"
    echo "   - VITE_API_URL: $(grep -q "VITE_API_URL" ./clientnpm/.env && echo "‚úÖ Configurado" || echo "‚ùå No encontrado")"
fi

if [ -f "./clientnpm/.env.production" ]; then
    echo -e "${GREEN}‚úÖ Frontend .env.production tiene contenido:${NC}"
    echo "   - VITE_API_URL: $(grep -q "VITE_API_URL" ./clientnpm/.env.production && echo "‚úÖ Configurado" || echo "‚ùå No encontrado")"
fi

echo ""
echo "üîí Verificando reglas de Cursor AI..."

# Verificar que las reglas de Cursor AI est√©n configuradas
if [ -f ".cursorrules" ]; then
    if grep -q "PROTECCI√ìN DE ARCHIVOS DE ENTORNO" .cursorrules; then
        echo -e "${GREEN}‚úÖ Reglas de protecci√≥n configuradas en .cursorrules${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Reglas de protecci√≥n no encontradas en .cursorrules${NC}"
    fi
else
    echo -e "${RED}‚ùå Archivo .cursorrules no existe${NC}"
fi

echo ""
echo "üìù Resumen de verificaci√≥n:"
echo "   - Los archivos .env* deben existir localmente"
echo "   - Los archivos .env* deben estar en .gitignore"
echo "   - Las reglas de Cursor AI deben estar configuradas"
echo "   - Los valores deben estar configurados en Vercel"
echo ""
echo "üîó Para configurar en Vercel, usa los valores de los archivos .env*"
echo "üìñ Consulta ENVIRONMENT_PROTECTION.md para m√°s detalles" 